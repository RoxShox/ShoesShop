/*! destyle.css v3.0.0 | MIT License | https://github.com/nicolas-cusan/destyle.css */
@import "./vendor/slick.css";*,::after,::before{-webkit-box-sizing:border-box;box-sizing:border-box;border-style:solid;border-width:0}html{line-height:1.15;-webkit-text-size-adjust:100%;-webkit-tap-highlight-color:transparent}address,blockquote,body,dl,figure,form,iframe,ol,p,pre,table,ul{margin:0}details,main{display:block}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit;margin:0}ol,ul{padding:0;list-style:none}dt{font-weight:700}dd{margin-left:0}a,hr{color:inherit}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible;border-top-width:1px;margin:0;clear:both}code,kbd,pre,samp{font-family:monospace,monospace;font-size:inherit}address{font-style:inherit}a{background-color:transparent;text-decoration:none}abbr[title]{-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}embed,iframe,img,object,svg{vertical-align:bottom}button,input,optgroup,select,textarea{-webkit-appearance:none;-moz-appearance:none;appearance:none;vertical-align:middle;color:inherit;font:inherit;background:0 0;padding:0;margin:0;border-radius:0;text-align:inherit;text-transform:inherit}[type=checkbox]{-webkit-appearance:checkbox;-moz-appearance:checkbox;appearance:checkbox}[type=radio]{-webkit-appearance:radio;-moz-appearance:radio;appearance:radio}[type=button],[type=reset],[type=submit],button,label[for]{cursor:pointer}[type=button]:disabled,[type=reset]:disabled,[type=submit]:disabled,button:disabled{cursor:default}:-moz-focusring{outline:auto}select:disabled{opacity:inherit}fieldset,legend,option{padding:0}fieldset{margin:0;min-width:0}progress{vertical-align:baseline}textarea{overflow:auto}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}[contenteditable]:focus{outline:auto}table{border-color:inherit}caption{text-align:left}td,th{vertical-align:top;padding:0}th{text-align:left;font-weight:700}
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlbmRvci5zY3NzIiwidmVuZG9yL2Rlc3R5bGUuY3NzIiwidmVuZG9yLm1pbi5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNRLDZCQ0lSLEMsQ0NDQSxPLENBREEsUSxDREdFLDZCLENBQUEscUIsQ0FDQSxrQixDQUNBLGMsQ0FZRixJLENBQ0UsZ0IsQ0FDQSw2QixDQUNBLHVDLENDeUJGLE8sQ0FEQSxVLENEZEEsSSxDQ29CQSxFLENBREEsTSxDQURBLEksQ0FEQSxNLENBdUJBLEUsQ0R6QkEsQyxDQ0NBLEcsQ0FIQSxLLENEK0JBLEUsQ0EzQ0UsUSxDQW1WRixPLENBNVVBLEksQ0FDRSxhLENBcUJGLEUsQ0NIQSxFLENBQ0EsRSxDQUNBLEUsQ0FDQSxFLENBQ0EsRSxDREtFLGlCLENBQ0EsbUIsQ0FDQSxRLENDRUYsRSxDRElBLEUsQ0FHRSxTLENBQ0EsZSxDQU1GLEUsQ0FDRSxlLENBR0YsRSxDQUNFLGEsQ0EwQ0YsQyxDQS9CQSxFLENBa0NFLGEsQ0FsQ0YsRSxDQUNFLDhCLENBQUEsc0IsQ0FDQSxRLENBQ0EsZ0IsQ0FDQSxvQixDQUNBLFEsQ0FDQSxVLENBc0RGLEksQ0NMQSxHLENEeENBLEcsQ0N5Q0EsSSxDRHhDRSwrQixDQUNBLGlCLENBR0YsTyxDQUNFLGtCLENBVUYsQyxDQUNFLDRCLENBQ0Esb0IsQ0FTRixXLENBQ0Usd0MsQ0FBQSxnQyxDQU9GLEMsQ0NKQSxNLENETUUsa0IsQ0FtQkYsSyxDQUNFLGEsQ0FRRixHLENDTEEsRyxDRE9FLGEsQ0FDQSxhLENBQ0EsaUIsQ0FDQSx1QixDQUdGLEcsQ0FDRSxhLENBR0YsRyxDQUNFLFMsQ0NJRixLLENBRUEsTSxDQUhBLEcsQ0FFQSxNLENES0EsRyxDQUtFLHFCLENBWUYsTSxDQ1RBLEssQ0FDQSxRLENBQ0EsTSxDQUNBLFEsQ0RXRSx1QixDQUNBLG9CLENBQUEsZSxDQUNBLHFCLENBQ0EsYSxDQUNBLFksQ0FDQSxjLENBQ0EsUyxDQUNBLFEsQ0FDQSxlLENBQ0Esa0IsQ0FDQSxzQixDQU9GLGUsQ0FDRSwyQixDQUNBLHdCLENBQUEsbUIsQ0FHRixZLENBQ0Usd0IsQ0FDQSxxQixDQUFBLGdCLENDQ0YsYSxDQUNBLFksQ0FDQSxhLENESUEsTSxDQXVHQSxVLENBbkdFLGMsQ0NIRixzQixDQUNBLHFCLENBQ0Esc0IsQ0RJQSxlLENBSUUsYyxDQU9GLGUsQ0FDRSxZLENBR0YsZSxDQUNFLGUsQ0FlRixRLENBTUEsTSxDQWRBLE0sQ0FDRSxTLENBT0YsUSxDQUNFLFEsQ0FFQSxXLENBV0YsUSxDQUNFLHVCLENBT0YsUSxDQUNFLGEsQ0FPRix3QyxDQ1pBLHdDLENEY0UsVyxDQU9GLGEsQ0FDRSxtQixDQU9GLHdDLENBQ0UsdUIsQ0FRRiw0QixDQUNFLHlCLENBQ0EsWSxDQTBCRixPLENBQ0UsaUIsQ0FPRix1QixDQUNFLFksQ0FVRixLLENBQ0Usb0IsQ0FHRixPLENBQ0UsZSxDQUdGLEUsQ0NsQkEsRSxDRG9CRSxrQixDQUNBLFMsQ0FHRixFLENBQ0UsZSxDQUNBLGUiLCJmaWxlIjoidmVuZG9yLm1pbi5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJAaW1wb3J0IFwiLi92ZW5kb3IvZGVzdHlsZVwiO1xyXG5AaW1wb3J0IFwiLi92ZW5kb3Ivc2xpY2suY3NzXCI7XHJcblxyXG4iLCIvKiEgZGVzdHlsZS5jc3MgdjMuMC4wIHwgTUlUIExpY2Vuc2UgfCBodHRwczovL2dpdGh1Yi5jb20vbmljb2xhcy1jdXNhbi9kZXN0eWxlLmNzcyAqL1xyXG5cclxuLyogUmVzZXQgYm94LW1vZGVsIGFuZCBzZXQgYm9yZGVycyAqL1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuKixcclxuOjpiZWZvcmUsXHJcbjo6YWZ0ZXIge1xyXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcclxuICBib3JkZXItd2lkdGg6IDA7XHJcbn1cclxuXHJcbi8qIERvY3VtZW50ICovXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKiAyLiBQcmV2ZW50IGFkanVzdG1lbnRzIG9mIGZvbnQgc2l6ZSBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2VzIGluIGlPUy5cclxuICogMy4gUmVtb3ZlIGdyYXkgb3ZlcmxheSBvbiBsaW5rcyBmb3IgaU9TLlxyXG4gKi9cclxuXHJcbmh0bWwge1xyXG4gIGxpbmUtaGVpZ2h0OiAxLjE1OyAvKiAxICovXHJcbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXHJcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiB0cmFuc3BhcmVudDsgLyogMyovXHJcbn1cclxuXHJcbi8qIFNlY3Rpb25zICovXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cclxuXHJcbmJvZHkge1xyXG4gIG1hcmdpbjogMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbmRlciB0aGUgYG1haW5gIGVsZW1lbnQgY29uc2lzdGVudGx5IGluIElFLlxyXG4gKi9cclxuXHJcbm1haW4ge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4vKiBWZXJ0aWNhbCByaHl0aG0gKi9cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbnAsXHJcbnRhYmxlLFxyXG5ibG9ja3F1b3RlLFxyXG5hZGRyZXNzLFxyXG5wcmUsXHJcbmlmcmFtZSxcclxuZm9ybSxcclxuZmlndXJlLFxyXG5kbCB7XHJcbiAgbWFyZ2luOiAwO1xyXG59XHJcblxyXG4vKiBIZWFkaW5ncyAqL1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxuaDEsXHJcbmgyLFxyXG5oMyxcclxuaDQsXHJcbmg1LFxyXG5oNiB7XHJcbiAgZm9udC1zaXplOiBpbmhlcml0O1xyXG4gIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xyXG4gIG1hcmdpbjogMDtcclxufVxyXG5cclxuLyogTGlzdHMgKGVudW1lcmF0aW9uKSAqL1xyXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xyXG5cclxudWwsXHJcbm9sIHtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDtcclxuICBsaXN0LXN0eWxlOiBub25lO1xyXG59XHJcblxyXG4vKiBMaXN0cyAoZGVmaW5pdGlvbikgKi9cclxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cclxuXHJcbmR0IHtcclxuICBmb250LXdlaWdodDogYm9sZDtcclxufVxyXG5cclxuZGQge1xyXG4gIG1hcmdpbi1sZWZ0OiAwO1xyXG59XHJcblxyXG4vKiBHcm91cGluZyBjb250ZW50ICovXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gRmlyZWZveC5cclxuICogMi4gU2hvdyB0aGUgb3ZlcmZsb3cgaW4gRWRnZSBhbmQgSUUuXHJcbiAqL1xyXG5cclxuaHIge1xyXG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94OyAvKiAxICovXHJcbiAgaGVpZ2h0OiAwOyAvKiAxICovXHJcbiAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cclxuICBib3JkZXItdG9wLXdpZHRoOiAxcHg7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIGNsZWFyOiBib3RoO1xyXG4gIGNvbG9yOiBpbmhlcml0O1xyXG59XHJcblxyXG4vKipcclxuICogMS4gQ29ycmVjdCB0aGUgaW5oZXJpdGFuY2UgYW5kIHNjYWxpbmcgb2YgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cclxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cclxuXHJcbnByZSB7XHJcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlOyAvKiAxICovXHJcbiAgZm9udC1zaXplOiBpbmhlcml0OyAvKiAyICovXHJcbn1cclxuXHJcbmFkZHJlc3Mge1xyXG4gIGZvbnQtc3R5bGU6IGluaGVyaXQ7XHJcbn1cclxuXHJcbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzICovXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxyXG4gKi9cclxuXHJcbmEge1xyXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICBjb2xvcjogaW5oZXJpdDtcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBDaHJvbWUgNTctXHJcbiAqIDIuIEFkZCB0aGUgY29ycmVjdCB0ZXh0IGRlY29yYXRpb24gaW4gQ2hyb21lLCBFZGdlLCBJRSwgT3BlcmEsIGFuZCBTYWZhcmkuXHJcbiAqL1xyXG5cclxuYWJiclt0aXRsZV0ge1xyXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDsgLyogMiAqL1xyXG59XHJcblxyXG4vKipcclxuICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cclxuICovXHJcblxyXG5iLFxyXG5zdHJvbmcge1xyXG4gIGZvbnQtd2VpZ2h0OiBib2xkZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xyXG5cclxuY29kZSxcclxua2JkLFxyXG5zYW1wIHtcclxuICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cclxuICBmb250LXNpemU6IGluaGVyaXQ7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxyXG4gKi9cclxuXHJcbnNtYWxsIHtcclxuICBmb250LXNpemU6IDgwJTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxyXG4gKiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xyXG5cclxuc3ViLFxyXG5zdXAge1xyXG4gIGZvbnQtc2l6ZTogNzUlO1xyXG4gIGxpbmUtaGVpZ2h0OiAwO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XHJcbn1cclxuXHJcbnN1YiB7XHJcbiAgYm90dG9tOiAtMC4yNWVtO1xyXG59XHJcblxyXG5zdXAge1xyXG4gIHRvcDogLTAuNWVtO1xyXG59XHJcblxyXG4vKiBSZXBsYWNlZCBjb250ZW50ICovXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogUHJldmVudCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaXNzdWVzLlxyXG4gKi9cclxuXHJcbnN2ZyxcclxuaW1nLFxyXG5lbWJlZCxcclxub2JqZWN0LFxyXG5pZnJhbWUge1xyXG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XHJcbn1cclxuXHJcbi8qIEZvcm1zICovXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuICogUmVzZXQgZm9ybSBmaWVsZHMgdG8gbWFrZSB0aGVtIHN0eWxlYWJsZS5cclxuICogMS4gTWFrZSBmb3JtIGVsZW1lbnRzIHN0eWxhYmxlIGFjcm9zcyBzeXN0ZW1zIGlPUyBlc3BlY2lhbGx5LlxyXG4gKiAyLiBJbmhlcml0IHRleHQtdHJhbnNmb3JtIGZyb20gcGFyZW50LlxyXG4gKi9cclxuXHJcbmJ1dHRvbixcclxuaW5wdXQsXHJcbm9wdGdyb3VwLFxyXG5zZWxlY3QsXHJcbnRleHRhcmVhIHtcclxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IC8qIDEgKi9cclxuICBhcHBlYXJhbmNlOiBub25lO1xyXG4gIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XHJcbiAgY29sb3I6IGluaGVyaXQ7XHJcbiAgZm9udDogaW5oZXJpdDtcclxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICBwYWRkaW5nOiAwO1xyXG4gIG1hcmdpbjogMDtcclxuICBib3JkZXItcmFkaXVzOiAwO1xyXG4gIHRleHQtYWxpZ246IGluaGVyaXQ7XHJcbiAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIFJlc2V0IHJhZGlvIGFuZCBjaGVja2JveCBhcHBlYXJhbmNlIHRvIHByZXNlcnZlIHRoZWlyIGxvb2sgaW4gaU9TLlxyXG4gKi9cclxuXHJcblt0eXBlPVwiY2hlY2tib3hcIl0ge1xyXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogY2hlY2tib3g7XHJcbiAgYXBwZWFyYW5jZTogY2hlY2tib3g7XHJcbn1cclxuXHJcblt0eXBlPVwicmFkaW9cIl0ge1xyXG4gIC13ZWJraXQtYXBwZWFyYW5jZTogcmFkaW87XHJcbiAgYXBwZWFyYW5jZTogcmFkaW87XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBDb3JyZWN0IGN1cnNvcnMgZm9yIGNsaWNrYWJsZSBlbGVtZW50cy5cclxuICovXHJcblxyXG5idXR0b24sXHJcblt0eXBlPVwiYnV0dG9uXCJdLFxyXG5bdHlwZT1cInJlc2V0XCJdLFxyXG5bdHlwZT1cInN1Ym1pdFwiXSB7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG59XHJcblxyXG5idXR0b246ZGlzYWJsZWQsXHJcblt0eXBlPVwiYnV0dG9uXCJdOmRpc2FibGVkLFxyXG5bdHlwZT1cInJlc2V0XCJdOmRpc2FibGVkLFxyXG5bdHlwZT1cInN1Ym1pdFwiXTpkaXNhYmxlZCB7XHJcbiAgY3Vyc29yOiBkZWZhdWx0O1xyXG59XHJcblxyXG4vKipcclxuICogSW1wcm92ZSBvdXRsaW5lcyBmb3IgRmlyZWZveCBhbmQgdW5pZnkgc3R5bGUgd2l0aCBpbnB1dCBlbGVtZW50cyAmIGJ1dHRvbnMuXHJcbiAqL1xyXG5cclxuOi1tb3otZm9jdXNyaW5nIHtcclxuICBvdXRsaW5lOiBhdXRvO1xyXG59XHJcblxyXG5zZWxlY3Q6ZGlzYWJsZWQge1xyXG4gIG9wYWNpdHk6IGluaGVyaXQ7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBSZW1vdmUgcGFkZGluZ1xyXG4gKi9cclxuXHJcbm9wdGlvbiB7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlc2V0IHRvIGludmlzaWJsZVxyXG4gKi9cclxuXHJcbmZpZWxkc2V0IHtcclxuICBtYXJnaW46IDA7XHJcbiAgcGFkZGluZzogMDtcclxuICBtaW4td2lkdGg6IDA7XHJcbn1cclxuXHJcbmxlZ2VuZCB7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG5cclxuLyoqXHJcbiAqIEFkZCB0aGUgY29ycmVjdCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXHJcbiAqL1xyXG5cclxucHJvZ3Jlc3Mge1xyXG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUgMTArLlxyXG4gKi9cclxuXHJcbnRleHRhcmVhIHtcclxuICBvdmVyZmxvdzogYXV0bztcclxufVxyXG5cclxuLyoqXHJcbiAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cclxuICovXHJcblxyXG5bdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcclxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xyXG4gIGhlaWdodDogYXV0bztcclxufVxyXG5cclxuLyoqXHJcbiAqIDEuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxyXG4gKi9cclxuXHJcblt0eXBlPVwic2VhcmNoXCJdIHtcclxuICBvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMSAqL1xyXG59XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxyXG4gKi9cclxuXHJcblt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcclxuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxyXG4gKiAyLiBGaXggZm9udCBpbmhlcml0YW5jZS5cclxuICovXHJcblxyXG46Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcclxuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMSAqL1xyXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cclxufVxyXG5cclxuLyoqXHJcbiAqIENsaWNrYWJsZSBsYWJlbHNcclxuICovXHJcblxyXG5sYWJlbFtmb3JdIHtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi8qIEludGVyYWN0aXZlICovXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBFZGdlLCBJRSAxMCssIGFuZCBGaXJlZm94LlxyXG4gKi9cclxuXHJcbmRldGFpbHMge1xyXG4gIGRpc3BsYXk6IGJsb2NrO1xyXG59XHJcblxyXG4vKlxyXG4gKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXHJcbiAqL1xyXG5cclxuc3VtbWFyeSB7XHJcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xyXG59XHJcblxyXG4vKlxyXG4gKiBSZW1vdmUgb3V0bGluZSBmb3IgZWRpdGFibGUgY29udGVudC5cclxuICovXHJcblxyXG5bY29udGVudGVkaXRhYmxlXTpmb2N1cyB7XHJcbiAgb3V0bGluZTogYXV0bztcclxufVxyXG5cclxuLyogVGFibGVzICovXHJcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXHJcblxyXG4vKipcclxuMS4gQ29ycmVjdCB0YWJsZSBib3JkZXIgY29sb3IgaW5oZXJpdGFuY2UgaW4gYWxsIENocm9tZSBhbmQgU2FmYXJpLlxyXG4qL1xyXG5cclxudGFibGUge1xyXG4gIGJvcmRlci1jb2xvcjogaW5oZXJpdDsgLyogMSAqL1xyXG59XHJcblxyXG5jYXB0aW9uIHtcclxuICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG59XHJcblxyXG50ZCxcclxudGgge1xyXG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XHJcbiAgcGFkZGluZzogMDtcclxufVxyXG5cclxudGgge1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbn1cclxuIiwiLyohIGRlc3R5bGUuY3NzIHYzLjAuMCB8IE1JVCBMaWNlbnNlIHwgaHR0cHM6Ly9naXRodWIuY29tL25pY29sYXMtY3VzYW4vZGVzdHlsZS5jc3MgKi9cbi8qIFJlc2V0IGJveC1tb2RlbCBhbmQgc2V0IGJvcmRlcnMgKi9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5AaW1wb3J0IFwiLi92ZW5kb3Ivc2xpY2suY3NzXCI7XG4qLFxuOjpiZWZvcmUsXG46OmFmdGVyIHtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgICAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIGJvcmRlci13aWR0aDogMDtcbn1cblxuLyogRG9jdW1lbnQgKi9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGxpbmUgaGVpZ2h0IGluIGFsbCBicm93c2Vycy5cbiAqIDIuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW4gaU9TLlxuICogMy4gUmVtb3ZlIGdyYXkgb3ZlcmxheSBvbiBsaW5rcyBmb3IgaU9TLlxuICovXG5odG1sIHtcbiAgbGluZS1oZWlnaHQ6IDEuMTU7XG4gIC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGFwLWhpZ2hsaWdodC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC8qIDMqL1xufVxuXG4vKiBTZWN0aW9ucyAqL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzLlxuICovXG5ib2R5IHtcbiAgbWFyZ2luOiAwO1xufVxuXG4vKipcbiAqIFJlbmRlciB0aGUgYG1haW5gIGVsZW1lbnQgY29uc2lzdGVudGx5IGluIElFLlxuICovXG5tYWluIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qIFZlcnRpY2FsIHJoeXRobSAqL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbnAsXG50YWJsZSxcbmJsb2NrcXVvdGUsXG5hZGRyZXNzLFxucHJlLFxuaWZyYW1lLFxuZm9ybSxcbmZpZ3VyZSxcbmRsIHtcbiAgbWFyZ2luOiAwO1xufVxuXG4vKiBIZWFkaW5ncyAqL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbmgxLFxuaDIsXG5oMyxcbmg0LFxuaDUsXG5oNiB7XG4gIGZvbnQtc2l6ZTogaW5oZXJpdDtcbiAgZm9udC13ZWlnaHQ6IGluaGVyaXQ7XG4gIG1hcmdpbjogMDtcbn1cblxuLyogTGlzdHMgKGVudW1lcmF0aW9uKSAqL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbnVsLFxub2wge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5cbi8qIExpc3RzIChkZWZpbml0aW9uKSAqL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbmR0IHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbmRkIHtcbiAgbWFyZ2luLWxlZnQ6IDA7XG59XG5cbi8qIEdyb3VwaW5nIGNvbnRlbnQgKi9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIDEuIEFkZCB0aGUgY29ycmVjdCBib3ggc2l6aW5nIGluIEZpcmVmb3guXG4gKiAyLiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlIGFuZCBJRS5cbiAqL1xuaHIge1xuICAtd2Via2l0LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAgICAgICAgIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICAvKiAxICovXG4gIGhlaWdodDogMDtcbiAgLyogMSAqL1xuICBvdmVyZmxvdzogdmlzaWJsZTtcbiAgLyogMiAqL1xuICBib3JkZXItdG9wLXdpZHRoOiAxcHg7XG4gIG1hcmdpbjogMDtcbiAgY2xlYXI6IGJvdGg7XG4gIGNvbG9yOiBpbmhlcml0O1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gKiAyLiBDb3JyZWN0IHRoZSBvZGQgYGVtYCBmb250IHNpemluZyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnByZSB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgLyogMSAqL1xuICBmb250LXNpemU6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbn1cblxuYWRkcmVzcyB7XG4gIGZvbnQtc3R5bGU6IGluaGVyaXQ7XG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzICovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBvbiBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cbmEge1xuICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBjb2xvcjogaW5oZXJpdDtcbn1cblxuLyoqXG4gKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gQ2hyb21lIDU3LVxuICogMi4gQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIElFLCBPcGVyYSwgYW5kIFNhZmFyaS5cbiAqL1xuYWJiclt0aXRsZV0ge1xuICAtd2Via2l0LXRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCB3ZWlnaHQgaW4gQ2hyb21lLCBFZGdlLCBhbmQgU2FmYXJpLlxuICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGRlcjtcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5jb2RlLFxua2JkLFxuc2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgLyogMSAqL1xuICBmb250LXNpemU6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAqL1xuc21hbGwge1xuICBmb250LXNpemU6IDgwJTtcbn1cblxuLyoqXG4gKiBQcmV2ZW50IGBzdWJgIGFuZCBgc3VwYCBlbGVtZW50cyBmcm9tIGFmZmVjdGluZyB0aGUgbGluZSBoZWlnaHQgaW5cbiAqIGFsbCBicm93c2Vycy5cbiAqL1xuc3ViLFxuc3VwIHtcbiAgZm9udC1zaXplOiA3NSU7XG4gIGxpbmUtaGVpZ2h0OiAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuc3ViIHtcbiAgYm90dG9tOiAtMC4yNWVtO1xufVxuXG5zdXAge1xuICB0b3A6IC0wLjVlbTtcbn1cblxuLyogUmVwbGFjZWQgY29udGVudCAqL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUHJldmVudCB2ZXJ0aWNhbCBhbGlnbm1lbnQgaXNzdWVzLlxuICovXG5zdmcsXG5pbWcsXG5lbWJlZCxcbm9iamVjdCxcbmlmcmFtZSB7XG4gIHZlcnRpY2FsLWFsaWduOiBib3R0b207XG59XG5cbi8qIEZvcm1zICovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZXNldCBmb3JtIGZpZWxkcyB0byBtYWtlIHRoZW0gc3R5bGVhYmxlLlxuICogMS4gTWFrZSBmb3JtIGVsZW1lbnRzIHN0eWxhYmxlIGFjcm9zcyBzeXN0ZW1zIGlPUyBlc3BlY2lhbGx5LlxuICogMi4gSW5oZXJpdCB0ZXh0LXRyYW5zZm9ybSBmcm9tIHBhcmVudC5cbiAqL1xuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xuICAvKiAxICovXG4gIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcbiAgICAgICBhcHBlYXJhbmNlOiBub25lO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xuICBjb2xvcjogaW5oZXJpdDtcbiAgZm9udDogaW5oZXJpdDtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIHBhZGRpbmc6IDA7XG4gIG1hcmdpbjogMDtcbiAgYm9yZGVyLXJhZGl1czogMDtcbiAgdGV4dC1hbGlnbjogaW5oZXJpdDtcbiAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQ7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBSZXNldCByYWRpbyBhbmQgY2hlY2tib3ggYXBwZWFyYW5jZSB0byBwcmVzZXJ2ZSB0aGVpciBsb29rIGluIGlPUy5cbiAqL1xuW3R5cGU9Y2hlY2tib3hdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBjaGVja2JveDtcbiAgLW1vei1hcHBlYXJhbmNlOiBjaGVja2JveDtcbiAgICAgICBhcHBlYXJhbmNlOiBjaGVja2JveDtcbn1cblxuW3R5cGU9cmFkaW9dIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiByYWRpbztcbiAgLW1vei1hcHBlYXJhbmNlOiByYWRpbztcbiAgICAgICBhcHBlYXJhbmNlOiByYWRpbztcbn1cblxuLyoqXG4gKiBDb3JyZWN0IGN1cnNvcnMgZm9yIGNsaWNrYWJsZSBlbGVtZW50cy5cbiAqL1xuYnV0dG9uLFxuW3R5cGU9YnV0dG9uXSxcblt0eXBlPXJlc2V0XSxcblt0eXBlPXN1Ym1pdF0ge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbmJ1dHRvbjpkaXNhYmxlZCxcblt0eXBlPWJ1dHRvbl06ZGlzYWJsZWQsXG5bdHlwZT1yZXNldF06ZGlzYWJsZWQsXG5bdHlwZT1zdWJtaXRdOmRpc2FibGVkIHtcbiAgY3Vyc29yOiBkZWZhdWx0O1xufVxuXG4vKipcbiAqIEltcHJvdmUgb3V0bGluZXMgZm9yIEZpcmVmb3ggYW5kIHVuaWZ5IHN0eWxlIHdpdGggaW5wdXQgZWxlbWVudHMgJiBidXR0b25zLlxuICovXG46LW1vei1mb2N1c3Jpbmcge1xuICBvdXRsaW5lOiBhdXRvO1xufVxuXG5zZWxlY3Q6ZGlzYWJsZWQge1xuICBvcGFjaXR5OiBpbmhlcml0O1xufVxuXG4vKipcbiAqIFJlbW92ZSBwYWRkaW5nXG4gKi9cbm9wdGlvbiB7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuICogUmVzZXQgdG8gaW52aXNpYmxlXG4gKi9cbmZpZWxkc2V0IHtcbiAgbWFyZ2luOiAwO1xuICBwYWRkaW5nOiAwO1xuICBtaW4td2lkdGg6IDA7XG59XG5cbmxlZ2VuZCB7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuICogQWRkIHRoZSBjb3JyZWN0IHZlcnRpY2FsIGFsaWdubWVudCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xucHJvZ3Jlc3Mge1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBkZWZhdWx0IHZlcnRpY2FsIHNjcm9sbGJhciBpbiBJRSAxMCsuXG4gKi9cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogQ29ycmVjdCB0aGUgY3Vyc29yIHN0eWxlIG9mIGluY3JlbWVudCBhbmQgZGVjcmVtZW50IGJ1dHRvbnMgaW4gQ2hyb21lLlxuICovXG5bdHlwZT1udW1iZXJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9bnVtYmVyXTo6LXdlYmtpdC1vdXRlci1zcGluLWJ1dHRvbiB7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyoqXG4gKiAxLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiAqL1xuW3R5cGU9c2VhcmNoXSB7XG4gIG91dGxpbmUtb2Zmc2V0OiAtMnB4O1xuICAvKiAxICovXG59XG5cbi8qKlxuICogUmVtb3ZlIHRoZSBpbm5lciBwYWRkaW5nIGluIENocm9tZSBhbmQgU2FmYXJpIG9uIG1hY09TLlxuICovXG5bdHlwZT1zZWFyY2hdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAqIDEuIENvcnJlY3QgdGhlIGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgdHlwZXMgaW4gaU9TIGFuZCBTYWZhcmkuXG4gKiAyLiBGaXggZm9udCBpbmhlcml0YW5jZS5cbiAqL1xuOjotd2Via2l0LWZpbGUtdXBsb2FkLWJ1dHRvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gKiBDbGlja2FibGUgbGFiZWxzXG4gKi9cbmxhYmVsW2Zvcl0ge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi8qIEludGVyYWN0aXZlICovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFIDEwKywgYW5kIEZpcmVmb3guXG4gKi9cbmRldGFpbHMge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLypcbiAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cbiAqL1xuc3VtbWFyeSB7XG4gIGRpc3BsYXk6IGxpc3QtaXRlbTtcbn1cblxuLypcbiAqIFJlbW92ZSBvdXRsaW5lIGZvciBlZGl0YWJsZSBjb250ZW50LlxuICovXG5bY29udGVudGVkaXRhYmxlXTpmb2N1cyB7XG4gIG91dGxpbmU6IGF1dG87XG59XG5cbi8qIFRhYmxlcyAqL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuMS4gQ29ycmVjdCB0YWJsZSBib3JkZXIgY29sb3IgaW5oZXJpdGFuY2UgaW4gYWxsIENocm9tZSBhbmQgU2FmYXJpLlxuKi9cbnRhYmxlIHtcbiAgYm9yZGVyLWNvbG9yOiBpbmhlcml0O1xuICAvKiAxICovXG59XG5cbmNhcHRpb24ge1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xufVxuXG50ZCxcbnRoIHtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbiAgcGFkZGluZzogMDtcbn1cblxudGgge1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cclxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5abGJtUnZjaTlrWlhOMGVXeGxMbU56Y3lJc0luWmxibVJ2Y2k1elkzTnpJaXdpZG1WdVpHOXlMbU56Y3lKZExDSnVZVzFsY3lJNlcxMHNJbTFoY0hCcGJtZHpJam9pUVVGQlFTeHhSa0ZCUVR0QlFVVkJMRzlEUVVGQk8wRkJRMEVzYVVSQlFVRTdRVU5HVVN3MFFrRkJRVHRCUkVsU096czdSVUZIUlN3NFFrRkJRVHRWUVVGQkxITkNRVUZCTzBWQlEwRXNiVUpCUVVFN1JVRkRRU3hsUVVGQk8wRkZRVVk3TzBGR1IwRXNZVUZCUVR0QlFVTkJMR2xFUVVGQk8wRkJSVUU3T3pzN1JVRkJRVHRCUVUxQk8wVkJRMFVzYVVKQlFVRTdSVUZCYlVJc1RVRkJRVHRGUVVOdVFpdzRRa0ZCUVR0RlFVRm5ReXhOUVVGQk8wVkJRMmhETEhkRFFVRkJPMFZCUVRCRExFdEJRVUU3UVVWRE5VTTdPMEZHUlVFc1lVRkJRVHRCUVVOQkxHbEVRVUZCTzBGQlJVRTdPMFZCUVVFN1FVRkpRVHRGUVVORkxGTkJRVUU3UVVWRVJqczdRVVpKUVRzN1JVRkJRVHRCUVVsQk8wVkJRMFVzWTBGQlFUdEJSVVpHT3p0QlJrdEJMRzlDUVVGQk8wRkJRMEVzYVVSQlFVRTdRVUZGUVRzN096czdPenM3TzBWQlUwVXNVMEZCUVR0QlJVaEdPenRCUmsxQkxHRkJRVUU3UVVGRFFTeHBSRUZCUVR0QlFVVkJPenM3T3pzN1JVRk5SU3hyUWtGQlFUdEZRVU5CTEc5Q1FVRkJPMFZCUTBFc1UwRkJRVHRCUlVwR096dEJSazlCTEhkQ1FVRkJPMEZCUTBFc2FVUkJRVUU3UVVGRlFUczdSVUZGUlN4VFFVRkJPMFZCUTBFc1ZVRkJRVHRGUVVOQkxHZENRVUZCTzBGRlRFWTdPMEZHVVVFc2RVSkJRVUU3UVVGRFFTeHBSRUZCUVR0QlFVVkJPMFZCUTBVc2FVSkJRVUU3UVVWT1JqczdRVVpUUVR0RlFVTkZMR05CUVVFN1FVVk9SanM3UVVaVFFTeHhRa0ZCUVR0QlFVTkJMR2xFUVVGQk8wRkJSVUU3T3p0RlFVRkJPMEZCUzBFN1JVRkRSU3dyUWtGQlFUdFZRVUZCTEhWQ1FVRkJPMFZCUVhsQ0xFMUJRVUU3UlVGRGVrSXNVMEZCUVR0RlFVRlhMRTFCUVVFN1JVRkRXQ3hwUWtGQlFUdEZRVUZ0UWl4TlFVRkJPMFZCUTI1Q0xIRkNRVUZCTzBWQlEwRXNVMEZCUVR0RlFVTkJMRmRCUVVFN1JVRkRRU3hqUVVGQk8wRkZURVk3TzBGR1VVRTdPenRGUVVGQk8wRkJTMEU3UlVGRFJTeHBRMEZCUVR0RlFVRnRReXhOUVVGQk8wVkJRMjVETEd0Q1FVRkJPMFZCUVc5Q0xFMUJRVUU3UVVWS2RFSTdPMEZHVDBFN1JVRkRSU3h0UWtGQlFUdEJSVXBHT3p0QlJrOUJMSGxDUVVGQk8wRkJRMEVzYVVSQlFVRTdRVUZGUVRzN1JVRkJRVHRCUVVsQk8wVkJRMFVzTmtKQlFVRTdSVUZEUVN4eFFrRkJRVHRGUVVOQkxHTkJRVUU3UVVWT1JqczdRVVpUUVRzN08wVkJRVUU3UVVGTFFUdEZRVU5GTEhsRFFVRkJPMVZCUVVFc2FVTkJRVUU3UlVGQmJVTXNUVUZCUVR0QlJVNXlRenM3UVVaVFFUczdSVUZCUVR0QlFVbEJPenRGUVVWRkxHMUNRVUZCTzBGRlVFWTdPMEZHVlVFN096dEZRVUZCTzBGQlMwRTdPenRGUVVkRkxHbERRVUZCTzBWQlFXMURMRTFCUVVFN1JVRkRia01zYTBKQlFVRTdSVUZCYjBJc1RVRkJRVHRCUlU1MFFqczdRVVpUUVRzN1JVRkJRVHRCUVVsQk8wVkJRMFVzWTBGQlFUdEJSVkJHT3p0QlJsVkJPenM3UlVGQlFUdEJRVXRCT3p0RlFVVkZMR05CUVVFN1JVRkRRU3hqUVVGQk8wVkJRMEVzYTBKQlFVRTdSVUZEUVN4M1FrRkJRVHRCUlZKR096dEJSbGRCTzBWQlEwVXNaVUZCUVR0QlJWSkdPenRCUmxkQk8wVkJRMFVzVjBGQlFUdEJSVkpHT3p0QlJsZEJMSEZDUVVGQk8wRkJRMEVzYVVSQlFVRTdRVUZGUVRzN1JVRkJRVHRCUVVsQk96czdPenRGUVV0RkxITkNRVUZCTzBGRlZrWTdPMEZHWVVFc1ZVRkJRVHRCUVVOQkxHbEVRVUZCTzBGQlJVRTdPenM3UlVGQlFUdEJRVTFCT3pzN096dEZRVXRGTEhkQ1FVRkJPMFZCUVRCQ0xFMUJRVUU3UlVGRE1VSXNjVUpCUVVFN1QwRkJRU3huUWtGQlFUdEZRVU5CTEhOQ1FVRkJPMFZCUTBFc1kwRkJRVHRGUVVOQkxHRkJRVUU3UlVGRFFTeDFRa0ZCUVR0RlFVTkJMRlZCUVVFN1JVRkRRU3hUUVVGQk8wVkJRMEVzWjBKQlFVRTdSVUZEUVN4dFFrRkJRVHRGUVVOQkxIVkNRVUZCTzBWQlFYbENMRTFCUVVFN1FVVldNMEk3TzBGR1lVRTdPMFZCUVVFN1FVRkpRVHRGUVVORkxEUkNRVUZCTzBWQlEwRXNlVUpCUVVFN1QwRkJRU3h2UWtGQlFUdEJSVmhHT3p0QlJtTkJPMFZCUTBVc2VVSkJRVUU3UlVGRFFTeHpRa0ZCUVR0UFFVRkJMR2xDUVVGQk8wRkZXRVk3TzBGR1kwRTdPMFZCUVVFN1FVRkpRVHM3T3p0RlFVbEZMR1ZCUVVFN1FVVmFSanM3UVVabFFUczdPenRGUVVsRkxHVkJRVUU3UVVWYVJqczdRVVpsUVRzN1JVRkJRVHRCUVVsQk8wVkJRMFVzWVVGQlFUdEJSV0pHT3p0QlJtZENRVHRGUVVORkxHZENRVUZCTzBGRllrWTdPMEZHWjBKQk96dEZRVUZCTzBGQlNVRTdSVUZEUlN4VlFVRkJPMEZGWkVZN08wRkdhVUpCT3p0RlFVRkJPMEZCU1VFN1JVRkRSU3hUUVVGQk8wVkJRMEVzVlVGQlFUdEZRVU5CTEZsQlFVRTdRVVZtUmpzN1FVWnJRa0U3UlVGRFJTeFZRVUZCTzBGRlprWTdPMEZHYTBKQk96dEZRVUZCTzBGQlNVRTdSVUZEUlN4M1FrRkJRVHRCUldoQ1JqczdRVVp0UWtFN08wVkJRVUU3UVVGSlFUdEZRVU5GTEdOQlFVRTdRVVZxUWtZN08wRkdiMEpCT3p0RlFVRkJPMEZCU1VFN08wVkJSVVVzV1VGQlFUdEJSV3hDUmpzN1FVWnhRa0U3TzBWQlFVRTdRVUZKUVR0RlFVTkZMRzlDUVVGQk8wVkJRWE5DTEUxQlFVRTdRVVZzUW5oQ096dEJSbkZDUVRzN1JVRkJRVHRCUVVsQk8wVkJRMFVzZDBKQlFVRTdRVVZ1UWtZN08wRkdjMEpCT3pzN1JVRkJRVHRCUVV0Qk8wVkJRMFVzTUVKQlFVRTdSVUZCTkVJc1RVRkJRVHRGUVVNMVFpeGhRVUZCTzBWQlFXVXNUVUZCUVR0QlJXeENha0k3TzBGR2NVSkJPenRGUVVGQk8wRkJTVUU3UlVGRFJTeGxRVUZCTzBGRmJrSkdPenRCUm5OQ1FTeG5Ra0ZCUVR0QlFVTkJMR2xFUVVGQk8wRkJSVUU3TzBWQlFVRTdRVUZKUVR0RlFVTkZMR05CUVVFN1FVVnlRa1k3TzBGR2QwSkJPenRGUVVGQk8wRkJTVUU3UlVGRFJTeHJRa0ZCUVR0QlJYUkNSanM3UVVaNVFrRTdPMFZCUVVFN1FVRkpRVHRGUVVORkxHRkJRVUU3UVVWMlFrWTdPMEZHTUVKQkxGZEJRVUU3UVVGRFFTeHBSRUZCUVR0QlFVVkJPenREUVVGQk8wRkJTVUU3UlVGRFJTeHhRa0ZCUVR0RlFVRjFRaXhOUVVGQk8wRkZlRUo2UWpzN1FVWXlRa0U3UlVGRFJTeG5Ra0ZCUVR0QlJYaENSanM3UVVZeVFrRTdPMFZCUlVVc2JVSkJRVUU3UlVGRFFTeFZRVUZCTzBGRmVFSkdPenRCUmpKQ1FUdEZRVU5GTEdkQ1FVRkJPMFZCUTBFc2FVSkJRVUU3UVVWNFFrWWlMQ0ptYVd4bElqb2lkbVZ1Wkc5eUxtTnpjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUlTQmtaWE4wZVd4bExtTnpjeUIyTXk0d0xqQWdmQ0JOU1ZRZ1RHbGpaVzV6WlNCOElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOXVhV052YkdGekxXTjFjMkZ1TDJSbGMzUjViR1V1WTNOeklDb3ZYSEpjYmx4eVhHNHZLaUJTWlhObGRDQmliM2d0Ylc5a1pXd2dZVzVrSUhObGRDQmliM0prWlhKeklDb3ZYSEpjYmk4cUlEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOUlDb3ZYSEpjYmx4eVhHNHFMRnh5WEc0Nk9tSmxabTl5WlN4Y2NseHVPanBoWm5SbGNpQjdYSEpjYmlBZ1ltOTRMWE5wZW1sdVp6b2dZbTl5WkdWeUxXSnZlRHRjY2x4dUlDQmliM0prWlhJdGMzUjViR1U2SUhOdmJHbGtPMXh5WEc0Z0lHSnZjbVJsY2kxM2FXUjBhRG9nTUR0Y2NseHVmVnh5WEc1Y2NseHVMeW9nUkc5amRXMWxiblFnS2k5Y2NseHVMeW9nUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDBnS2k5Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lBeExpQkRiM0p5WldOMElIUm9aU0JzYVc1bElHaGxhV2RvZENCcGJpQmhiR3dnWW5KdmQzTmxjbk11WEhKY2JpQXFJREl1SUZCeVpYWmxiblFnWVdScWRYTjBiV1Z1ZEhNZ2IyWWdabTl1ZENCemFYcGxJR0ZtZEdWeUlHOXlhV1Z1ZEdGMGFXOXVJR05vWVc1blpYTWdhVzRnYVU5VExseHlYRzRnS2lBekxpQlNaVzF2ZG1VZ1ozSmhlU0J2ZG1WeWJHRjVJRzl1SUd4cGJtdHpJR1p2Y2lCcFQxTXVYSEpjYmlBcUwxeHlYRzVjY2x4dWFIUnRiQ0I3WEhKY2JpQWdiR2x1WlMxb1pXbG5hSFE2SURFdU1UVTdJQzhxSURFZ0tpOWNjbHh1SUNBdGQyVmlhMmwwTFhSbGVIUXRjMmw2WlMxaFpHcDFjM1E2SURFd01DVTdJQzhxSURJZ0tpOWNjbHh1SUNBdGQyVmlhMmwwTFhSaGNDMW9hV2RvYkdsbmFIUXRZMjlzYjNJNklIUnlZVzV6Y0dGeVpXNTBPeUF2S2lBektpOWNjbHh1ZlZ4eVhHNWNjbHh1THlvZ1UyVmpkR2x2Ym5NZ0tpOWNjbHh1THlvZ1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwZ0tpOWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQlNaVzF2ZG1VZ2RHaGxJRzFoY21kcGJpQnBiaUJoYkd3Z1luSnZkM05sY25NdVhISmNiaUFxTDF4eVhHNWNjbHh1WW05a2VTQjdYSEpjYmlBZ2JXRnlaMmx1T2lBd08xeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nVW1WdVpHVnlJSFJvWlNCZ2JXRnBibUFnWld4bGJXVnVkQ0JqYjI1emFYTjBaVzUwYkhrZ2FXNGdTVVV1WEhKY2JpQXFMMXh5WEc1Y2NseHViV0ZwYmlCN1hISmNiaUFnWkdsemNHeGhlVG9nWW14dlkyczdYSEpjYm4xY2NseHVYSEpjYmk4cUlGWmxjblJwWTJGc0lISm9lWFJvYlNBcUwxeHlYRzR2S2lBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFNBcUwxeHlYRzVjY2x4dWNDeGNjbHh1ZEdGaWJHVXNYSEpjYm1Kc2IyTnJjWFZ2ZEdVc1hISmNibUZrWkhKbGMzTXNYSEpjYm5CeVpTeGNjbHh1YVdaeVlXMWxMRnh5WEc1bWIzSnRMRnh5WEc1bWFXZDFjbVVzWEhKY2JtUnNJSHRjY2x4dUlDQnRZWEpuYVc0NklEQTdYSEpjYm4xY2NseHVYSEpjYmk4cUlFaGxZV1JwYm1keklDb3ZYSEpjYmk4cUlEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOUlDb3ZYSEpjYmx4eVhHNW9NU3hjY2x4dWFESXNYSEpjYm1nekxGeHlYRzVvTkN4Y2NseHVhRFVzWEhKY2JtZzJJSHRjY2x4dUlDQm1iMjUwTFhOcGVtVTZJR2x1YUdWeWFYUTdYSEpjYmlBZ1ptOXVkQzEzWldsbmFIUTZJR2x1YUdWeWFYUTdYSEpjYmlBZ2JXRnlaMmx1T2lBd08xeHlYRzU5WEhKY2JseHlYRzR2S2lCTWFYTjBjeUFvWlc1MWJXVnlZWFJwYjI0cElDb3ZYSEpjYmk4cUlEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOUlDb3ZYSEpjYmx4eVhHNTFiQ3hjY2x4dWIyd2dlMXh5WEc0Z0lHMWhjbWRwYmpvZ01EdGNjbHh1SUNCd1lXUmthVzVuT2lBd08xeHlYRzRnSUd4cGMzUXRjM1I1YkdVNklHNXZibVU3WEhKY2JuMWNjbHh1WEhKY2JpOHFJRXhwYzNSeklDaGtaV1pwYm1sMGFXOXVLU0FxTDF4eVhHNHZLaUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4eVhHNWNjbHh1WkhRZ2UxeHlYRzRnSUdadmJuUXRkMlZwWjJoME9pQmliMnhrTzF4eVhHNTlYSEpjYmx4eVhHNWtaQ0I3WEhKY2JpQWdiV0Z5WjJsdUxXeGxablE2SURBN1hISmNibjFjY2x4dVhISmNiaThxSUVkeWIzVndhVzVuSUdOdmJuUmxiblFnS2k5Y2NseHVMeW9nUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDBnS2k5Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lBeExpQkJaR1FnZEdobElHTnZjbkpsWTNRZ1ltOTRJSE5wZW1sdVp5QnBiaUJHYVhKbFptOTRMbHh5WEc0Z0tpQXlMaUJUYUc5M0lIUm9aU0J2ZG1WeVpteHZkeUJwYmlCRlpHZGxJR0Z1WkNCSlJTNWNjbHh1SUNvdlhISmNibHh5WEc1b2NpQjdYSEpjYmlBZ1ltOTRMWE5wZW1sdVp6b2dZMjl1ZEdWdWRDMWliM2c3SUM4cUlERWdLaTljY2x4dUlDQm9aV2xuYUhRNklEQTdJQzhxSURFZ0tpOWNjbHh1SUNCdmRtVnlabXh2ZHpvZ2RtbHphV0pzWlRzZ0x5b2dNaUFxTDF4eVhHNGdJR0p2Y21SbGNpMTBiM0F0ZDJsa2RHZzZJREZ3ZUR0Y2NseHVJQ0J0WVhKbmFXNDZJREE3WEhKY2JpQWdZMnhsWVhJNklHSnZkR2c3WEhKY2JpQWdZMjlzYjNJNklHbHVhR1Z5YVhRN1hISmNibjFjY2x4dVhISmNiaThxS2x4eVhHNGdLaUF4TGlCRGIzSnlaV04wSUhSb1pTQnBibWhsY21sMFlXNWpaU0JoYm1RZ2MyTmhiR2x1WnlCdlppQm1iMjUwSUhOcGVtVWdhVzRnWVd4c0lHSnliM2R6WlhKekxseHlYRzRnS2lBeUxpQkRiM0p5WldOMElIUm9aU0J2WkdRZ1lHVnRZQ0JtYjI1MElITnBlbWx1WnlCcGJpQmhiR3dnWW5KdmQzTmxjbk11WEhKY2JpQXFMMXh5WEc1Y2NseHVjSEpsSUh0Y2NseHVJQ0JtYjI1MExXWmhiV2xzZVRvZ2JXOXViM053WVdObExDQnRiMjV2YzNCaFkyVTdJQzhxSURFZ0tpOWNjbHh1SUNCbWIyNTBMWE5wZW1VNklHbHVhR1Z5YVhRN0lDOHFJRElnS2k5Y2NseHVmVnh5WEc1Y2NseHVZV1JrY21WemN5QjdYSEpjYmlBZ1ptOXVkQzF6ZEhsc1pUb2dhVzVvWlhKcGREdGNjbHh1ZlZ4eVhHNWNjbHh1THlvZ1ZHVjRkQzFzWlhabGJDQnpaVzFoYm5ScFkzTWdLaTljY2x4dUx5b2dQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdLaTljY2x4dVhISmNiaThxS2x4eVhHNGdLaUJTWlcxdmRtVWdkR2hsSUdkeVlYa2dZbUZqYTJkeWIzVnVaQ0J2YmlCaFkzUnBkbVVnYkdsdWEzTWdhVzRnU1VVZ01UQXVYSEpjYmlBcUwxeHlYRzVjY2x4dVlTQjdYSEpjYmlBZ1ltRmphMmR5YjNWdVpDMWpiMnh2Y2pvZ2RISmhibk53WVhKbGJuUTdYSEpjYmlBZ2RHVjRkQzFrWldOdmNtRjBhVzl1T2lCdWIyNWxPMXh5WEc0Z0lHTnZiRzl5T2lCcGJtaGxjbWwwTzF4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dNUzRnVW1WdGIzWmxJSFJvWlNCaWIzUjBiMjBnWW05eVpHVnlJR2x1SUVOb2NtOXRaU0ExTnkxY2NseHVJQ29nTWk0Z1FXUmtJSFJvWlNCamIzSnlaV04wSUhSbGVIUWdaR1ZqYjNKaGRHbHZiaUJwYmlCRGFISnZiV1VzSUVWa1oyVXNJRWxGTENCUGNHVnlZU3dnWVc1a0lGTmhabUZ5YVM1Y2NseHVJQ292WEhKY2JseHlYRzVoWW1KeVczUnBkR3hsWFNCN1hISmNiaUFnZEdWNGRDMWtaV052Y21GMGFXOXVPaUIxYm1SbGNteHBibVVnWkc5MGRHVmtPeUF2S2lBeUlDb3ZYSEpjYm4xY2NseHVYSEpjYmk4cUtseHlYRzRnS2lCQlpHUWdkR2hsSUdOdmNuSmxZM1FnWm05dWRDQjNaV2xuYUhRZ2FXNGdRMmh5YjIxbExDQkZaR2RsTENCaGJtUWdVMkZtWVhKcExseHlYRzRnS2k5Y2NseHVYSEpjYm1Jc1hISmNibk4wY205dVp5QjdYSEpjYmlBZ1ptOXVkQzEzWldsbmFIUTZJR0p2YkdSbGNqdGNjbHh1ZlZ4eVhHNWNjbHh1THlvcVhISmNiaUFxSURFdUlFTnZjbkpsWTNRZ2RHaGxJR2x1YUdWeWFYUmhibU5sSUdGdVpDQnpZMkZzYVc1bklHOW1JR1p2Ym5RZ2MybDZaU0JwYmlCaGJHd2dZbkp2ZDNObGNuTXVYSEpjYmlBcUlESXVJRU52Y25KbFkzUWdkR2hsSUc5a1pDQmdaVzFnSUdadmJuUWdjMmw2YVc1bklHbHVJR0ZzYkNCaWNtOTNjMlZ5Y3k1Y2NseHVJQ292WEhKY2JseHlYRzVqYjJSbExGeHlYRzVyWW1Rc1hISmNibk5oYlhBZ2UxeHlYRzRnSUdadmJuUXRabUZ0YVd4NU9pQnRiMjV2YzNCaFkyVXNJRzF2Ym05emNHRmpaVHNnTHlvZ01TQXFMMXh5WEc0Z0lHWnZiblF0YzJsNlpUb2dhVzVvWlhKcGREc2dMeW9nTWlBcUwxeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUVdSa0lIUm9aU0JqYjNKeVpXTjBJR1p2Ym5RZ2MybDZaU0JwYmlCaGJHd2dZbkp2ZDNObGNuTXVYSEpjYmlBcUwxeHlYRzVjY2x4dWMyMWhiR3dnZTF4eVhHNGdJR1p2Ym5RdGMybDZaVG9nT0RBbE8xeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nVUhKbGRtVnVkQ0JnYzNWaVlDQmhibVFnWUhOMWNHQWdaV3hsYldWdWRITWdabkp2YlNCaFptWmxZM1JwYm1jZ2RHaGxJR3hwYm1VZ2FHVnBaMmgwSUdsdVhISmNiaUFxSUdGc2JDQmljbTkzYzJWeWN5NWNjbHh1SUNvdlhISmNibHh5WEc1emRXSXNYSEpjYm5OMWNDQjdYSEpjYmlBZ1ptOXVkQzF6YVhwbE9pQTNOU1U3WEhKY2JpQWdiR2x1WlMxb1pXbG5hSFE2SURBN1hISmNiaUFnY0c5emFYUnBiMjQ2SUhKbGJHRjBhWFpsTzF4eVhHNGdJSFpsY25ScFkyRnNMV0ZzYVdkdU9pQmlZWE5sYkdsdVpUdGNjbHh1ZlZ4eVhHNWNjbHh1YzNWaUlIdGNjbHh1SUNCaWIzUjBiMjA2SUMwd0xqSTFaVzA3WEhKY2JuMWNjbHh1WEhKY2JuTjFjQ0I3WEhKY2JpQWdkRzl3T2lBdE1DNDFaVzA3WEhKY2JuMWNjbHh1WEhKY2JpOHFJRkpsY0d4aFkyVmtJR052Ym5SbGJuUWdLaTljY2x4dUx5b2dQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdLaTljY2x4dVhISmNiaThxS2x4eVhHNGdLaUJRY21WMlpXNTBJSFpsY25ScFkyRnNJR0ZzYVdkdWJXVnVkQ0JwYzNOMVpYTXVYSEpjYmlBcUwxeHlYRzVjY2x4dWMzWm5MRnh5WEc1cGJXY3NYSEpjYm1WdFltVmtMRnh5WEc1dlltcGxZM1FzWEhKY2JtbG1jbUZ0WlNCN1hISmNiaUFnZG1WeWRHbGpZV3d0WVd4cFoyNDZJR0p2ZEhSdmJUdGNjbHh1ZlZ4eVhHNWNjbHh1THlvZ1JtOXliWE1nS2k5Y2NseHVMeW9nUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDBnS2k5Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCU1pYTmxkQ0JtYjNKdElHWnBaV3hrY3lCMGJ5QnRZV3RsSUhSb1pXMGdjM1I1YkdWaFlteGxMbHh5WEc0Z0tpQXhMaUJOWVd0bElHWnZjbTBnWld4bGJXVnVkSE1nYzNSNWJHRmliR1VnWVdOeWIzTnpJSE41YzNSbGJYTWdhVTlUSUdWemNHVmphV0ZzYkhrdVhISmNiaUFxSURJdUlFbHVhR1Z5YVhRZ2RHVjRkQzEwY21GdWMyWnZjbTBnWm5KdmJTQndZWEpsYm5RdVhISmNiaUFxTDF4eVhHNWNjbHh1WW5WMGRHOXVMRnh5WEc1cGJuQjFkQ3hjY2x4dWIzQjBaM0p2ZFhBc1hISmNibk5sYkdWamRDeGNjbHh1ZEdWNGRHRnlaV0VnZTF4eVhHNGdJQzEzWldKcmFYUXRZWEJ3WldGeVlXNWpaVG9nYm05dVpUc2dMeW9nTVNBcUwxeHlYRzRnSUdGd2NHVmhjbUZ1WTJVNklHNXZibVU3WEhKY2JpQWdkbVZ5ZEdsallXd3RZV3hwWjI0NklHMXBaR1JzWlR0Y2NseHVJQ0JqYjJ4dmNqb2dhVzVvWlhKcGREdGNjbHh1SUNCbWIyNTBPaUJwYm1obGNtbDBPMXh5WEc0Z0lHSmhZMnRuY205MWJtUTZJSFJ5WVc1emNHRnlaVzUwTzF4eVhHNGdJSEJoWkdScGJtYzZJREE3WEhKY2JpQWdiV0Z5WjJsdU9pQXdPMXh5WEc0Z0lHSnZjbVJsY2kxeVlXUnBkWE02SURBN1hISmNiaUFnZEdWNGRDMWhiR2xuYmpvZ2FXNW9aWEpwZER0Y2NseHVJQ0IwWlhoMExYUnlZVzV6Wm05eWJUb2dhVzVvWlhKcGREc2dMeW9nTWlBcUwxeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nVW1WelpYUWdjbUZrYVc4Z1lXNWtJR05vWldOclltOTRJR0Z3Y0dWaGNtRnVZMlVnZEc4Z2NISmxjMlZ5ZG1VZ2RHaGxhWElnYkc5dmF5QnBiaUJwVDFNdVhISmNiaUFxTDF4eVhHNWNjbHh1VzNSNWNHVTlYQ0pqYUdWamEySnZlRndpWFNCN1hISmNiaUFnTFhkbFltdHBkQzFoY0hCbFlYSmhibU5sT2lCamFHVmphMkp2ZUR0Y2NseHVJQ0JoY0hCbFlYSmhibU5sT2lCamFHVmphMkp2ZUR0Y2NseHVmVnh5WEc1Y2NseHVXM1I1Y0dVOVhDSnlZV1JwYjF3aVhTQjdYSEpjYmlBZ0xYZGxZbXRwZEMxaGNIQmxZWEpoYm1ObE9pQnlZV1JwYnp0Y2NseHVJQ0JoY0hCbFlYSmhibU5sT2lCeVlXUnBienRjY2x4dWZWeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFTnZjbkpsWTNRZ1kzVnljMjl5Y3lCbWIzSWdZMnhwWTJ0aFlteGxJR1ZzWlcxbGJuUnpMbHh5WEc0Z0tpOWNjbHh1WEhKY2JtSjFkSFJ2Yml4Y2NseHVXM1I1Y0dVOVhDSmlkWFIwYjI1Y0lsMHNYSEpjYmx0MGVYQmxQVndpY21WelpYUmNJbDBzWEhKY2JsdDBlWEJsUFZ3aWMzVmliV2wwWENKZElIdGNjbHh1SUNCamRYSnpiM0k2SUhCdmFXNTBaWEk3WEhKY2JuMWNjbHh1WEhKY2JtSjFkSFJ2Ympwa2FYTmhZbXhsWkN4Y2NseHVXM1I1Y0dVOVhDSmlkWFIwYjI1Y0lsMDZaR2x6WVdKc1pXUXNYSEpjYmx0MGVYQmxQVndpY21WelpYUmNJbDA2WkdsellXSnNaV1FzWEhKY2JsdDBlWEJsUFZ3aWMzVmliV2wwWENKZE9tUnBjMkZpYkdWa0lIdGNjbHh1SUNCamRYSnpiM0k2SUdSbFptRjFiSFE3WEhKY2JuMWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkpiWEJ5YjNabElHOTFkR3hwYm1WeklHWnZjaUJHYVhKbFptOTRJR0Z1WkNCMWJtbG1lU0J6ZEhsc1pTQjNhWFJvSUdsdWNIVjBJR1ZzWlcxbGJuUnpJQ1lnWW5WMGRHOXVjeTVjY2x4dUlDb3ZYSEpjYmx4eVhHNDZMVzF2ZWkxbWIyTjFjM0pwYm1jZ2UxeHlYRzRnSUc5MWRHeHBibVU2SUdGMWRHODdYSEpjYm4xY2NseHVYSEpjYm5ObGJHVmpkRHBrYVhOaFlteGxaQ0I3WEhKY2JpQWdiM0JoWTJsMGVUb2dhVzVvWlhKcGREdGNjbHh1ZlZ4eVhHNWNjbHh1THlvcVhISmNiaUFxSUZKbGJXOTJaU0J3WVdSa2FXNW5YSEpjYmlBcUwxeHlYRzVjY2x4dWIzQjBhVzl1SUh0Y2NseHVJQ0J3WVdSa2FXNW5PaUF3TzF4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dVbVZ6WlhRZ2RHOGdhVzUyYVhOcFlteGxYSEpjYmlBcUwxeHlYRzVjY2x4dVptbGxiR1J6WlhRZ2UxeHlYRzRnSUcxaGNtZHBiam9nTUR0Y2NseHVJQ0J3WVdSa2FXNW5PaUF3TzF4eVhHNGdJRzFwYmkxM2FXUjBhRG9nTUR0Y2NseHVmVnh5WEc1Y2NseHViR1ZuWlc1a0lIdGNjbHh1SUNCd1lXUmthVzVuT2lBd08xeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUVdSa0lIUm9aU0JqYjNKeVpXTjBJSFpsY25ScFkyRnNJR0ZzYVdkdWJXVnVkQ0JwYmlCRGFISnZiV1VzSUVacGNtVm1iM2dzSUdGdVpDQlBjR1Z5WVM1Y2NseHVJQ292WEhKY2JseHlYRzV3Y205bmNtVnpjeUI3WEhKY2JpQWdkbVZ5ZEdsallXd3RZV3hwWjI0NklHSmhjMlZzYVc1bE8xeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nVW1WdGIzWmxJSFJvWlNCa1pXWmhkV3gwSUhabGNuUnBZMkZzSUhOamNtOXNiR0poY2lCcGJpQkpSU0F4TUNzdVhISmNiaUFxTDF4eVhHNWNjbHh1ZEdWNGRHRnlaV0VnZTF4eVhHNGdJRzkyWlhKbWJHOTNPaUJoZFhSdk8xeHlYRzU5WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUTI5eWNtVmpkQ0IwYUdVZ1kzVnljMjl5SUhOMGVXeGxJRzltSUdsdVkzSmxiV1Z1ZENCaGJtUWdaR1ZqY21WdFpXNTBJR0oxZEhSdmJuTWdhVzRnUTJoeWIyMWxMbHh5WEc0Z0tpOWNjbHh1WEhKY2JsdDBlWEJsUFZ3aWJuVnRZbVZ5WENKZE9qb3RkMlZpYTJsMExXbHVibVZ5TFhOd2FXNHRZblYwZEc5dUxGeHlYRzViZEhsd1pUMWNJbTUxYldKbGNsd2lYVG82TFhkbFltdHBkQzF2ZFhSbGNpMXpjR2x1TFdKMWRIUnZiaUI3WEhKY2JpQWdhR1ZwWjJoME9pQmhkWFJ2TzF4eVhHNTlYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dNUzRnUTI5eWNtVmpkQ0IwYUdVZ2IzVjBiR2x1WlNCemRIbHNaU0JwYmlCVFlXWmhjbWt1WEhKY2JpQXFMMXh5WEc1Y2NseHVXM1I1Y0dVOVhDSnpaV0Z5WTJoY0lsMGdlMXh5WEc0Z0lHOTFkR3hwYm1VdGIyWm1jMlYwT2lBdE1uQjRPeUF2S2lBeElDb3ZYSEpjYm4xY2NseHVYSEpjYmk4cUtseHlYRzRnS2lCU1pXMXZkbVVnZEdobElHbHVibVZ5SUhCaFpHUnBibWNnYVc0Z1EyaHliMjFsSUdGdVpDQlRZV1poY21rZ2IyNGdiV0ZqVDFNdVhISmNiaUFxTDF4eVhHNWNjbHh1VzNSNWNHVTlYQ0p6WldGeVkyaGNJbDA2T2kxM1pXSnJhWFF0YzJWaGNtTm9MV1JsWTI5eVlYUnBiMjRnZTF4eVhHNGdJQzEzWldKcmFYUXRZWEJ3WldGeVlXNWpaVG9nYm05dVpUdGNjbHh1ZlZ4eVhHNWNjbHh1THlvcVhISmNiaUFxSURFdUlFTnZjbkpsWTNRZ2RHaGxJR2x1WVdKcGJHbDBlU0IwYnlCemRIbHNaU0JqYkdsamEyRmliR1VnZEhsd1pYTWdhVzRnYVU5VElHRnVaQ0JUWVdaaGNta3VYSEpjYmlBcUlESXVJRVpwZUNCbWIyNTBJR2x1YUdWeWFYUmhibU5sTGx4eVhHNGdLaTljY2x4dVhISmNiam82TFhkbFltdHBkQzFtYVd4bExYVndiRzloWkMxaWRYUjBiMjRnZTF4eVhHNGdJQzEzWldKcmFYUXRZWEJ3WldGeVlXNWpaVG9nWW5WMGRHOXVPeUF2S2lBeElDb3ZYSEpjYmlBZ1ptOXVkRG9nYVc1b1pYSnBkRHNnTHlvZ01pQXFMMXh5WEc1OVhISmNibHh5WEc0dktpcGNjbHh1SUNvZ1EyeHBZMnRoWW14bElHeGhZbVZzYzF4eVhHNGdLaTljY2x4dVhISmNibXhoWW1Wc1cyWnZjbDBnZTF4eVhHNGdJR04xY25OdmNqb2djRzlwYm5SbGNqdGNjbHh1ZlZ4eVhHNWNjbHh1THlvZ1NXNTBaWEpoWTNScGRtVWdLaTljY2x4dUx5b2dQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdLaTljY2x4dVhISmNiaThxWEhKY2JpQXFJRUZrWkNCMGFHVWdZMjl5Y21WamRDQmthWE53YkdGNUlHbHVJRVZrWjJVc0lFbEZJREV3S3l3Z1lXNWtJRVpwY21WbWIzZ3VYSEpjYmlBcUwxeHlYRzVjY2x4dVpHVjBZV2xzY3lCN1hISmNiaUFnWkdsemNHeGhlVG9nWW14dlkyczdYSEpjYm4xY2NseHVYSEpjYmk4cVhISmNiaUFxSUVGa1pDQjBhR1VnWTI5eWNtVmpkQ0JrYVhOd2JHRjVJR2x1SUdGc2JDQmljbTkzYzJWeWN5NWNjbHh1SUNvdlhISmNibHh5WEc1emRXMXRZWEo1SUh0Y2NseHVJQ0JrYVhOd2JHRjVPaUJzYVhOMExXbDBaVzA3WEhKY2JuMWNjbHh1WEhKY2JpOHFYSEpjYmlBcUlGSmxiVzkyWlNCdmRYUnNhVzVsSUdadmNpQmxaR2wwWVdKc1pTQmpiMjUwWlc1MExseHlYRzRnS2k5Y2NseHVYSEpjYmx0amIyNTBaVzUwWldScGRHRmliR1ZkT21adlkzVnpJSHRjY2x4dUlDQnZkWFJzYVc1bE9pQmhkWFJ2TzF4eVhHNTlYSEpjYmx4eVhHNHZLaUJVWVdKc1pYTWdLaTljY2x4dUx5b2dQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdLaTljY2x4dVhISmNiaThxS2x4eVhHNHhMaUJEYjNKeVpXTjBJSFJoWW14bElHSnZjbVJsY2lCamIyeHZjaUJwYm1obGNtbDBZVzVqWlNCcGJpQmhiR3dnUTJoeWIyMWxJR0Z1WkNCVFlXWmhjbWt1WEhKY2Jpb3ZYSEpjYmx4eVhHNTBZV0pzWlNCN1hISmNiaUFnWW05eVpHVnlMV052Ykc5eU9pQnBibWhsY21sME95QXZLaUF4SUNvdlhISmNibjFjY2x4dVhISmNibU5oY0hScGIyNGdlMXh5WEc0Z0lIUmxlSFF0WVd4cFoyNDZJR3hsWm5RN1hISmNibjFjY2x4dVhISmNiblJrTEZ4eVhHNTBhQ0I3WEhKY2JpQWdkbVZ5ZEdsallXd3RZV3hwWjI0NklIUnZjRHRjY2x4dUlDQndZV1JrYVc1bk9pQXdPMXh5WEc1OVhISmNibHh5WEc1MGFDQjdYSEpjYmlBZ2RHVjRkQzFoYkdsbmJqb2diR1ZtZER0Y2NseHVJQ0JtYjI1MExYZGxhV2RvZERvZ1ltOXNaRHRjY2x4dWZWeHlYRzRpTENKQWFXMXdiM0owSUZ3aUxpOTJaVzVrYjNJdlpHVnpkSGxzWlZ3aU8xeHlYRzVBYVcxd2IzSjBJRndpTGk5MlpXNWtiM0l2YzJ4cFkyc3VZM056WENJN1hISmNibHh5WEc0aUxDSXZLaUVnWkdWemRIbHNaUzVqYzNNZ2RqTXVNQzR3SUh3Z1RVbFVJRXhwWTJWdWMyVWdmQ0JvZEhSd2N6b3ZMMmRwZEdoMVlpNWpiMjB2Ym1samIyeGhjeTFqZFhOaGJpOWtaWE4wZVd4bExtTnpjeUFxTDF4dUx5b2dVbVZ6WlhRZ1ltOTRMVzF2WkdWc0lHRnVaQ0J6WlhRZ1ltOXlaR1Z5Y3lBcUwxeHVMeW9nUFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDBnS2k5Y2JrQnBiWEJ2Y25RZ1hDSXVMM1psYm1SdmNpOXpiR2xqYXk1amMzTmNJanRjYmlvc1hHNDZPbUpsWm05eVpTeGNiam82WVdaMFpYSWdlMXh1SUNCaWIzZ3RjMmw2YVc1bk9pQmliM0prWlhJdFltOTRPMXh1SUNCaWIzSmtaWEl0YzNSNWJHVTZJSE52Ykdsa08xeHVJQ0JpYjNKa1pYSXRkMmxrZEdnNklEQTdYRzU5WEc1Y2JpOHFJRVJ2WTNWdFpXNTBJQ292WEc0dktpQTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBTQXFMMXh1THlvcVhHNGdLaUF4TGlCRGIzSnlaV04wSUhSb1pTQnNhVzVsSUdobGFXZG9kQ0JwYmlCaGJHd2dZbkp2ZDNObGNuTXVYRzRnS2lBeUxpQlFjbVYyWlc1MElHRmthblZ6ZEcxbGJuUnpJRzltSUdadmJuUWdjMmw2WlNCaFpuUmxjaUJ2Y21sbGJuUmhkR2x2YmlCamFHRnVaMlZ6SUdsdUlHbFBVeTVjYmlBcUlETXVJRkpsYlc5MlpTQm5jbUY1SUc5MlpYSnNZWGtnYjI0Z2JHbHVhM01nWm05eUlHbFBVeTVjYmlBcUwxeHVhSFJ0YkNCN1hHNGdJR3hwYm1VdGFHVnBaMmgwT2lBeExqRTFPMXh1SUNBdktpQXhJQ292WEc0Z0lDMTNaV0pyYVhRdGRHVjRkQzF6YVhwbExXRmthblZ6ZERvZ01UQXdKVHRjYmlBZ0x5b2dNaUFxTDF4dUlDQXRkMlZpYTJsMExYUmhjQzFvYVdkb2JHbG5hSFF0WTI5c2IzSTZJSFJ5WVc1emNHRnlaVzUwTzF4dUlDQXZLaUF6S2k5Y2JuMWNibHh1THlvZ1UyVmpkR2x2Ym5NZ0tpOWNiaThxSUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5SUNvdlhHNHZLaXBjYmlBcUlGSmxiVzkyWlNCMGFHVWdiV0Z5WjJsdUlHbHVJR0ZzYkNCaWNtOTNjMlZ5Y3k1Y2JpQXFMMXh1WW05a2VTQjdYRzRnSUcxaGNtZHBiam9nTUR0Y2JuMWNibHh1THlvcVhHNGdLaUJTWlc1a1pYSWdkR2hsSUdCdFlXbHVZQ0JsYkdWdFpXNTBJR052Ym5OcGMzUmxiblJzZVNCcGJpQkpSUzVjYmlBcUwxeHViV0ZwYmlCN1hHNGdJR1JwYzNCc1lYazZJR0pzYjJOck8xeHVmVnh1WEc0dktpQldaWEowYVdOaGJDQnlhSGwwYUcwZ0tpOWNiaThxSUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5SUNvdlhHNXdMRnh1ZEdGaWJHVXNYRzVpYkc5amEzRjFiM1JsTEZ4dVlXUmtjbVZ6Y3l4Y2JuQnlaU3hjYm1sbWNtRnRaU3hjYm1admNtMHNYRzVtYVdkMWNtVXNYRzVrYkNCN1hHNGdJRzFoY21kcGJqb2dNRHRjYm4xY2JseHVMeW9nU0dWaFpHbHVaM01nS2k5Y2JpOHFJRDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlJQ292WEc1b01TeGNibWd5TEZ4dWFETXNYRzVvTkN4Y2JtZzFMRnh1YURZZ2UxeHVJQ0JtYjI1MExYTnBlbVU2SUdsdWFHVnlhWFE3WEc0Z0lHWnZiblF0ZDJWcFoyaDBPaUJwYm1obGNtbDBPMXh1SUNCdFlYSm5hVzQ2SURBN1hHNTlYRzVjYmk4cUlFeHBjM1J6SUNobGJuVnRaWEpoZEdsdmJpa2dLaTljYmk4cUlEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOUlDb3ZYRzUxYkN4Y2JtOXNJSHRjYmlBZ2JXRnlaMmx1T2lBd08xeHVJQ0J3WVdSa2FXNW5PaUF3TzF4dUlDQnNhWE4wTFhOMGVXeGxPaUJ1YjI1bE8xeHVmVnh1WEc0dktpQk1hWE4wY3lBb1pHVm1hVzVwZEdsdmJpa2dLaTljYmk4cUlEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOUlDb3ZYRzVrZENCN1hHNGdJR1p2Ym5RdGQyVnBaMmgwT2lCaWIyeGtPMXh1ZlZ4dVhHNWtaQ0I3WEc0Z0lHMWhjbWRwYmkxc1pXWjBPaUF3TzF4dWZWeHVYRzR2S2lCSGNtOTFjR2x1WnlCamIyNTBaVzUwSUNvdlhHNHZLaUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4dUx5b3FYRzRnS2lBeExpQkJaR1FnZEdobElHTnZjbkpsWTNRZ1ltOTRJSE5wZW1sdVp5QnBiaUJHYVhKbFptOTRMbHh1SUNvZ01pNGdVMmh2ZHlCMGFHVWdiM1psY21ac2IzY2dhVzRnUldSblpTQmhibVFnU1VVdVhHNGdLaTljYm1oeUlIdGNiaUFnWW05NExYTnBlbWx1WnpvZ1kyOXVkR1Z1ZEMxaWIzZzdYRzRnSUM4cUlERWdLaTljYmlBZ2FHVnBaMmgwT2lBd08xeHVJQ0F2S2lBeElDb3ZYRzRnSUc5MlpYSm1iRzkzT2lCMmFYTnBZbXhsTzF4dUlDQXZLaUF5SUNvdlhHNGdJR0p2Y21SbGNpMTBiM0F0ZDJsa2RHZzZJREZ3ZUR0Y2JpQWdiV0Z5WjJsdU9pQXdPMXh1SUNCamJHVmhjam9nWW05MGFEdGNiaUFnWTI5c2IzSTZJR2x1YUdWeWFYUTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ01TNGdRMjl5Y21WamRDQjBhR1VnYVc1b1pYSnBkR0Z1WTJVZ1lXNWtJSE5qWVd4cGJtY2diMllnWm05dWRDQnphWHBsSUdsdUlHRnNiQ0JpY205M2MyVnljeTVjYmlBcUlESXVJRU52Y25KbFkzUWdkR2hsSUc5a1pDQmdaVzFnSUdadmJuUWdjMmw2YVc1bklHbHVJR0ZzYkNCaWNtOTNjMlZ5Y3k1Y2JpQXFMMXh1Y0hKbElIdGNiaUFnWm05dWRDMW1ZVzFwYkhrNklHMXZibTl6Y0dGalpTd2diVzl1YjNOd1lXTmxPMXh1SUNBdktpQXhJQ292WEc0Z0lHWnZiblF0YzJsNlpUb2dhVzVvWlhKcGREdGNiaUFnTHlvZ01pQXFMMXh1ZlZ4dVhHNWhaR1J5WlhOeklIdGNiaUFnWm05dWRDMXpkSGxzWlRvZ2FXNW9aWEpwZER0Y2JuMWNibHh1THlvZ1ZHVjRkQzFzWlhabGJDQnpaVzFoYm5ScFkzTWdLaTljYmk4cUlEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOUlDb3ZYRzR2S2lwY2JpQXFJRkpsYlc5MlpTQjBhR1VnWjNKaGVTQmlZV05yWjNKdmRXNWtJRzl1SUdGamRHbDJaU0JzYVc1cmN5QnBiaUJKUlNBeE1DNWNiaUFxTDF4dVlTQjdYRzRnSUdKaFkydG5jbTkxYm1RdFkyOXNiM0k2SUhSeVlXNXpjR0Z5Wlc1ME8xeHVJQ0IwWlhoMExXUmxZMjl5WVhScGIyNDZJRzV2Ym1VN1hHNGdJR052Ykc5eU9pQnBibWhsY21sME8xeHVmVnh1WEc0dktpcGNiaUFxSURFdUlGSmxiVzkyWlNCMGFHVWdZbTkwZEc5dElHSnZjbVJsY2lCcGJpQkRhSEp2YldVZ05UY3RYRzRnS2lBeUxpQkJaR1FnZEdobElHTnZjbkpsWTNRZ2RHVjRkQ0JrWldOdmNtRjBhVzl1SUdsdUlFTm9jbTl0WlN3Z1JXUm5aU3dnU1VVc0lFOXdaWEpoTENCaGJtUWdVMkZtWVhKcExseHVJQ292WEc1aFltSnlXM1JwZEd4bFhTQjdYRzRnSUhSbGVIUXRaR1ZqYjNKaGRHbHZiam9nZFc1a1pYSnNhVzVsSUdSdmRIUmxaRHRjYmlBZ0x5b2dNaUFxTDF4dWZWeHVYRzR2S2lwY2JpQXFJRUZrWkNCMGFHVWdZMjl5Y21WamRDQm1iMjUwSUhkbGFXZG9kQ0JwYmlCRGFISnZiV1VzSUVWa1oyVXNJR0Z1WkNCVFlXWmhjbWt1WEc0Z0tpOWNibUlzWEc1emRISnZibWNnZTF4dUlDQm1iMjUwTFhkbGFXZG9kRG9nWW05c1pHVnlPMXh1ZlZ4dVhHNHZLaXBjYmlBcUlERXVJRU52Y25KbFkzUWdkR2hsSUdsdWFHVnlhWFJoYm1ObElHRnVaQ0J6WTJGc2FXNW5JRzltSUdadmJuUWdjMmw2WlNCcGJpQmhiR3dnWW5KdmQzTmxjbk11WEc0Z0tpQXlMaUJEYjNKeVpXTjBJSFJvWlNCdlpHUWdZR1Z0WUNCbWIyNTBJSE5wZW1sdVp5QnBiaUJoYkd3Z1luSnZkM05sY25NdVhHNGdLaTljYm1OdlpHVXNYRzVyWW1Rc1hHNXpZVzF3SUh0Y2JpQWdabTl1ZEMxbVlXMXBiSGs2SUcxdmJtOXpjR0ZqWlN3Z2JXOXViM053WVdObE8xeHVJQ0F2S2lBeElDb3ZYRzRnSUdadmJuUXRjMmw2WlRvZ2FXNW9aWEpwZER0Y2JpQWdMeW9nTWlBcUwxeHVmVnh1WEc0dktpcGNiaUFxSUVGa1pDQjBhR1VnWTI5eWNtVmpkQ0JtYjI1MElITnBlbVVnYVc0Z1lXeHNJR0p5YjNkelpYSnpMbHh1SUNvdlhHNXpiV0ZzYkNCN1hHNGdJR1p2Ym5RdGMybDZaVG9nT0RBbE8xeHVmVnh1WEc0dktpcGNiaUFxSUZCeVpYWmxiblFnWUhOMVltQWdZVzVrSUdCemRYQmdJR1ZzWlcxbGJuUnpJR1p5YjIwZ1lXWm1aV04wYVc1bklIUm9aU0JzYVc1bElHaGxhV2RvZENCcGJseHVJQ29nWVd4c0lHSnliM2R6WlhKekxseHVJQ292WEc1emRXSXNYRzV6ZFhBZ2UxeHVJQ0JtYjI1MExYTnBlbVU2SURjMUpUdGNiaUFnYkdsdVpTMW9aV2xuYUhRNklEQTdYRzRnSUhCdmMybDBhVzl1T2lCeVpXeGhkR2wyWlR0Y2JpQWdkbVZ5ZEdsallXd3RZV3hwWjI0NklHSmhjMlZzYVc1bE8xeHVmVnh1WEc1emRXSWdlMXh1SUNCaWIzUjBiMjA2SUMwd0xqSTFaVzA3WEc1OVhHNWNibk4xY0NCN1hHNGdJSFJ2Y0RvZ0xUQXVOV1Z0TzF4dWZWeHVYRzR2S2lCU1pYQnNZV05sWkNCamIyNTBaVzUwSUNvdlhHNHZLaUE5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQU0FxTDF4dUx5b3FYRzRnS2lCUWNtVjJaVzUwSUhabGNuUnBZMkZzSUdGc2FXZHViV1Z1ZENCcGMzTjFaWE11WEc0Z0tpOWNibk4yWnl4Y2JtbHRaeXhjYm1WdFltVmtMRnh1YjJKcVpXTjBMRnh1YVdaeVlXMWxJSHRjYmlBZ2RtVnlkR2xqWVd3dFlXeHBaMjQ2SUdKdmRIUnZiVHRjYm4xY2JseHVMeW9nUm05eWJYTWdLaTljYmk4cUlEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOUlDb3ZYRzR2S2lwY2JpQXFJRkpsYzJWMElHWnZjbTBnWm1sbGJHUnpJSFJ2SUcxaGEyVWdkR2hsYlNCemRIbHNaV0ZpYkdVdVhHNGdLaUF4TGlCTllXdGxJR1p2Y20wZ1pXeGxiV1Z1ZEhNZ2MzUjViR0ZpYkdVZ1lXTnliM056SUhONWMzUmxiWE1nYVU5VElHVnpjR1ZqYVdGc2JIa3VYRzRnS2lBeUxpQkpibWhsY21sMElIUmxlSFF0ZEhKaGJuTm1iM0p0SUdaeWIyMGdjR0Z5Wlc1MExseHVJQ292WEc1aWRYUjBiMjRzWEc1cGJuQjFkQ3hjYm05d2RHZHliM1Z3TEZ4dWMyVnNaV04wTEZ4dWRHVjRkR0Z5WldFZ2UxeHVJQ0F0ZDJWaWEybDBMV0Z3Y0dWaGNtRnVZMlU2SUc1dmJtVTdYRzRnSUM4cUlERWdLaTljYmlBZ1lYQndaV0Z5WVc1alpUb2dibTl1WlR0Y2JpQWdkbVZ5ZEdsallXd3RZV3hwWjI0NklHMXBaR1JzWlR0Y2JpQWdZMjlzYjNJNklHbHVhR1Z5YVhRN1hHNGdJR1p2Ym5RNklHbHVhR1Z5YVhRN1hHNGdJR0poWTJ0bmNtOTFibVE2SUhSeVlXNXpjR0Z5Wlc1ME8xeHVJQ0J3WVdSa2FXNW5PaUF3TzF4dUlDQnRZWEpuYVc0NklEQTdYRzRnSUdKdmNtUmxjaTF5WVdScGRYTTZJREE3WEc0Z0lIUmxlSFF0WVd4cFoyNDZJR2x1YUdWeWFYUTdYRzRnSUhSbGVIUXRkSEpoYm5ObWIzSnRPaUJwYm1obGNtbDBPMXh1SUNBdktpQXlJQ292WEc1OVhHNWNiaThxS2x4dUlDb2dVbVZ6WlhRZ2NtRmthVzhnWVc1a0lHTm9aV05yWW05NElHRndjR1ZoY21GdVkyVWdkRzhnY0hKbGMyVnlkbVVnZEdobGFYSWdiRzl2YXlCcGJpQnBUMU11WEc0Z0tpOWNibHQwZVhCbFBXTm9aV05yWW05NFhTQjdYRzRnSUMxM1pXSnJhWFF0WVhCd1pXRnlZVzVqWlRvZ1kyaGxZMnRpYjNnN1hHNGdJR0Z3Y0dWaGNtRnVZMlU2SUdOb1pXTnJZbTk0TzF4dWZWeHVYRzViZEhsd1pUMXlZV1JwYjEwZ2UxeHVJQ0F0ZDJWaWEybDBMV0Z3Y0dWaGNtRnVZMlU2SUhKaFpHbHZPMXh1SUNCaGNIQmxZWEpoYm1ObE9pQnlZV1JwYnp0Y2JuMWNibHh1THlvcVhHNGdLaUJEYjNKeVpXTjBJR04xY25OdmNuTWdabTl5SUdOc2FXTnJZV0pzWlNCbGJHVnRaVzUwY3k1Y2JpQXFMMXh1WW5WMGRHOXVMRnh1VzNSNWNHVTlZblYwZEc5dVhTeGNibHQwZVhCbFBYSmxjMlYwWFN4Y2JsdDBlWEJsUFhOMVltMXBkRjBnZTF4dUlDQmpkWEp6YjNJNklIQnZhVzUwWlhJN1hHNTlYRzVjYm1KMWRIUnZianBrYVhOaFlteGxaQ3hjYmx0MGVYQmxQV0oxZEhSdmJsMDZaR2x6WVdKc1pXUXNYRzViZEhsd1pUMXlaWE5sZEYwNlpHbHpZV0pzWldRc1hHNWJkSGx3WlQxemRXSnRhWFJkT21ScGMyRmliR1ZrSUh0Y2JpQWdZM1Z5YzI5eU9pQmtaV1poZFd4ME8xeHVmVnh1WEc0dktpcGNiaUFxSUVsdGNISnZkbVVnYjNWMGJHbHVaWE1nWm05eUlFWnBjbVZtYjNnZ1lXNWtJSFZ1YVdaNUlITjBlV3hsSUhkcGRHZ2dhVzV3ZFhRZ1pXeGxiV1Z1ZEhNZ0ppQmlkWFIwYjI1ekxseHVJQ292WEc0NkxXMXZlaTFtYjJOMWMzSnBibWNnZTF4dUlDQnZkWFJzYVc1bE9pQmhkWFJ2TzF4dWZWeHVYRzV6Wld4bFkzUTZaR2x6WVdKc1pXUWdlMXh1SUNCdmNHRmphWFI1T2lCcGJtaGxjbWwwTzF4dWZWeHVYRzR2S2lwY2JpQXFJRkpsYlc5MlpTQndZV1JrYVc1blhHNGdLaTljYm05d2RHbHZiaUI3WEc0Z0lIQmhaR1JwYm1jNklEQTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVnpaWFFnZEc4Z2FXNTJhWE5wWW14bFhHNGdLaTljYm1acFpXeGtjMlYwSUh0Y2JpQWdiV0Z5WjJsdU9pQXdPMXh1SUNCd1lXUmthVzVuT2lBd08xeHVJQ0J0YVc0dGQybGtkR2c2SURBN1hHNTlYRzVjYm14bFoyVnVaQ0I3WEc0Z0lIQmhaR1JwYm1jNklEQTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1FXUmtJSFJvWlNCamIzSnlaV04wSUhabGNuUnBZMkZzSUdGc2FXZHViV1Z1ZENCcGJpQkRhSEp2YldVc0lFWnBjbVZtYjNnc0lHRnVaQ0JQY0dWeVlTNWNiaUFxTDF4dWNISnZaM0psYzNNZ2UxeHVJQ0IyWlhKMGFXTmhiQzFoYkdsbmJqb2dZbUZ6Wld4cGJtVTdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVnRiM1psSUhSb1pTQmtaV1poZFd4MElIWmxjblJwWTJGc0lITmpjbTlzYkdKaGNpQnBiaUJKUlNBeE1Dc3VYRzRnS2k5Y2JuUmxlSFJoY21WaElIdGNiaUFnYjNabGNtWnNiM2M2SUdGMWRHODdYRzU5WEc1Y2JpOHFLbHh1SUNvZ1EyOXljbVZqZENCMGFHVWdZM1Z5YzI5eUlITjBlV3hsSUc5bUlHbHVZM0psYldWdWRDQmhibVFnWkdWamNtVnRaVzUwSUdKMWRIUnZibk1nYVc0Z1EyaHliMjFsTGx4dUlDb3ZYRzViZEhsd1pUMXVkVzFpWlhKZE9qb3RkMlZpYTJsMExXbHVibVZ5TFhOd2FXNHRZblYwZEc5dUxGeHVXM1I1Y0dVOWJuVnRZbVZ5WFRvNkxYZGxZbXRwZEMxdmRYUmxjaTF6Y0dsdUxXSjFkSFJ2YmlCN1hHNGdJR2hsYVdkb2REb2dZWFYwYnp0Y2JuMWNibHh1THlvcVhHNGdLaUF4TGlCRGIzSnlaV04wSUhSb1pTQnZkWFJzYVc1bElITjBlV3hsSUdsdUlGTmhabUZ5YVM1Y2JpQXFMMXh1VzNSNWNHVTljMlZoY21Ob1hTQjdYRzRnSUc5MWRHeHBibVV0YjJabWMyVjBPaUF0TW5CNE8xeHVJQ0F2S2lBeElDb3ZYRzU5WEc1Y2JpOHFLbHh1SUNvZ1VtVnRiM1psSUhSb1pTQnBibTVsY2lCd1lXUmthVzVuSUdsdUlFTm9jbTl0WlNCaGJtUWdVMkZtWVhKcElHOXVJRzFoWTA5VExseHVJQ292WEc1YmRIbHdaVDF6WldGeVkyaGRPam90ZDJWaWEybDBMWE5sWVhKamFDMWtaV052Y21GMGFXOXVJSHRjYmlBZ0xYZGxZbXRwZEMxaGNIQmxZWEpoYm1ObE9pQnViMjVsTzF4dWZWeHVYRzR2S2lwY2JpQXFJREV1SUVOdmNuSmxZM1FnZEdobElHbHVZV0pwYkdsMGVTQjBieUJ6ZEhsc1pTQmpiR2xqYTJGaWJHVWdkSGx3WlhNZ2FXNGdhVTlUSUdGdVpDQlRZV1poY21rdVhHNGdLaUF5TGlCR2FYZ2dabTl1ZENCcGJtaGxjbWwwWVc1alpTNWNiaUFxTDF4dU9qb3RkMlZpYTJsMExXWnBiR1V0ZFhCc2IyRmtMV0oxZEhSdmJpQjdYRzRnSUMxM1pXSnJhWFF0WVhCd1pXRnlZVzVqWlRvZ1luVjBkRzl1TzF4dUlDQXZLaUF4SUNvdlhHNGdJR1p2Ym5RNklHbHVhR1Z5YVhRN1hHNGdJQzhxSURJZ0tpOWNibjFjYmx4dUx5b3FYRzRnS2lCRGJHbGphMkZpYkdVZ2JHRmlaV3h6WEc0Z0tpOWNibXhoWW1Wc1cyWnZjbDBnZTF4dUlDQmpkWEp6YjNJNklIQnZhVzUwWlhJN1hHNTlYRzVjYmk4cUlFbHVkR1Z5WVdOMGFYWmxJQ292WEc0dktpQTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBTQXFMMXh1THlwY2JpQXFJRUZrWkNCMGFHVWdZMjl5Y21WamRDQmthWE53YkdGNUlHbHVJRVZrWjJVc0lFbEZJREV3S3l3Z1lXNWtJRVpwY21WbWIzZ3VYRzRnS2k5Y2JtUmxkR0ZwYkhNZ2UxeHVJQ0JrYVhOd2JHRjVPaUJpYkc5amF6dGNibjFjYmx4dUx5cGNiaUFxSUVGa1pDQjBhR1VnWTI5eWNtVmpkQ0JrYVhOd2JHRjVJR2x1SUdGc2JDQmljbTkzYzJWeWN5NWNiaUFxTDF4dWMzVnRiV0Z5ZVNCN1hHNGdJR1JwYzNCc1lYazZJR3hwYzNRdGFYUmxiVHRjYm4xY2JseHVMeXBjYmlBcUlGSmxiVzkyWlNCdmRYUnNhVzVsSUdadmNpQmxaR2wwWVdKc1pTQmpiMjUwWlc1MExseHVJQ292WEc1YlkyOXVkR1Z1ZEdWa2FYUmhZbXhsWFRwbWIyTjFjeUI3WEc0Z0lHOTFkR3hwYm1VNklHRjFkRzg3WEc1OVhHNWNiaThxSUZSaFlteGxjeUFxTDF4dUx5b2dQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMGdLaTljYmk4cUtseHVNUzRnUTI5eWNtVmpkQ0IwWVdKc1pTQmliM0prWlhJZ1kyOXNiM0lnYVc1b1pYSnBkR0Z1WTJVZ2FXNGdZV3hzSUVOb2NtOXRaU0JoYm1RZ1UyRm1ZWEpwTGx4dUtpOWNiblJoWW14bElIdGNiaUFnWW05eVpHVnlMV052Ykc5eU9pQnBibWhsY21sME8xeHVJQ0F2S2lBeElDb3ZYRzU5WEc1Y2JtTmhjSFJwYjI0Z2UxeHVJQ0IwWlhoMExXRnNhV2R1T2lCc1pXWjBPMXh1ZlZ4dVhHNTBaQ3hjYm5Sb0lIdGNiaUFnZG1WeWRHbGpZV3d0WVd4cFoyNDZJSFJ2Y0R0Y2JpQWdjR0ZrWkdsdVp6b2dNRHRjYm4xY2JseHVkR2dnZTF4dUlDQjBaWGgwTFdGc2FXZHVPaUJzWldaME8xeHVJQ0JtYjI1MExYZGxhV2RvZERvZ1ltOXNaRHRjYm4waVhYMD0gKi8iXX0= */